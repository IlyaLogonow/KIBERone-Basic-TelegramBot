"""

"""
from dataclasses import dataclass
from random import choice

import telebot
from telebot import types

bot = telebot.TeleBot('6949937561:AAEsEhaQE6spVOyzJo_ogxMExjrT5Kywefk')

itfacts = (
    '–í –ì–∏–º–∞–ª–∞—è—Ö (—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π –ö–∏—Ç–∞–π) –∂–∏–≤–µ—Ç –º–∞–ª–∞—è –ø–∞–Ω–¥–∞ (–∫—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞). –í –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –µ—ë –Ω–∞–∑—ã–≤–∞—é—Ç ¬´Firefox¬ª. –≠—Ç–æ —Å–ª–æ–≤–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞‚Ä¶ –≤–æ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø –æ–Ω–∏ –ø–æ—á–µ–º—É-—Ç–æ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é –ª–∏—Å—É, –∞ –Ω–µ –ø–∞–Ω–¥—É.',
    '–ù–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –ª–æ–≥–æ—Ç–∏–ø–µ Apple –±—ã–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω —Å–∏–¥—è—â–∏–π –ø–æ–¥ —è–±–ª–æ–Ω–µ–π —Å—ç—Ä –ò—Å–∞–∞–∫ –ù—å—é—Ç–æ–Ω. –ù–∞–¥ –Ω–∏–º –Ω–∞–≤–∏—Å–∞–µ—Ç –≤–æ—Ç-–≤–æ—Ç –≥–æ—Ç–æ–≤–æ–µ —É–ø–∞—Å—Ç—å —è–±–ª–æ–∫–æ.',
    '–ö–æ–º–ø–∞–∫—Ç-–¥–∏—Å–∫–∏ (CD) —á–∏—Ç–∞—é—Ç—Å—è –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞ –¥–æ –Ω–∞—Ä—É–∂–Ω–æ–≥–æ, –∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –Ω–∞–æ–±–æ—Ä–æ—Ç.',
    '–°—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –º–æ—Ä–≥–∞–µ—Ç 7 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É. –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å ‚Äì 12 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.',
    '–ü–∞–ª—å—Ü—ã –Ω–∞–±–æ—Ä—â–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å ¬´–ø—Ä–æ–±–µ–≥–∞—é—Ç¬ª 20 –∫–º.',
    '–ü–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –±—É–¥–∏–ª—å–Ω–∏–∫ —É–º–µ–ª –∑–≤–æ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ 4 —á–∞—Å–∞ —É—Ç—Ä–∞.',
    '30 –Ω–æ—è–±—Ä—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (¬´Computer Security Day‚Äú)',
    '–†–∞–¥–∏–æ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å 38 –ª–µ—Ç, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ 50 –º–ª–Ω —Å–ª—É—à–∞—Ç–µ–ª–µ–π, —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—é ‚Äî 13 –ª–µ—Ç, iPod ‚Äî 3 –≥–æ–¥–∞.',
    '–°–Ω–∏–º–æ–∫, —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä–æ–π –≤ –º–∏—Ä–µ, –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∂–¥–∞—Ç—å 8 —á–∞—Å–æ–≤.',
    'Skype –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ö–∏—Ç–∞–µ.', '–¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∞ —á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ 10% –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á–µ–º —Å –±—É–º–∞–≥–∏.',
    '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ Linux-–¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ Ubuntu –≤–∑—è—Ç–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤. –û–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–Ø –∏–∑-–∑–∞ —Ç–µ–±—è¬ª.',)


@dataclass
class ButtonLabel:
    BUTTON_INFORMATION = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    BUTTON_STUDENTS = '–£—á–µ–Ω–∏–∫–∏'
    BUTTON_PAYMENT = 'üí≥ –û–ø–ª–∞—Ç–∞'
    BUTTON_TUTOR = 'üë©üèª‚Äçüè´ –¢—å—é—Ç–æ—Ä—ã'
    BUTTON_SOCIAL_MEDIA = 'üé¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-–ú–µ–¥–∏–∞'
    BUTTON_INTERESTING_FACT = 'üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!'
    BUTTON_BACK = 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è'
    BUTTON_MAIN_MENU = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    BUTTON_SCHEDULE = 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
    BUTTON_PROJECTS_EVENTS = 'üìÅ –ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    BUTTON_USEFUL_SOURCES = 'üìö –ó–Ω–∞–Ω–∏—è'
    BUTTON_PROFESSION_NAVIGATION = 'üíª –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π'
    BUTTON_STUDENT_MENU = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞'

    @staticmethod
    def get_button_label_main_menu():
        return (
            ButtonLabel.BUTTON_INFORMATION,
            ButtonLabel.BUTTON_STUDENTS
        )

    @staticmethod
    def get_button_label_information_menu():
        return (
            ButtonLabel.BUTTON_PAYMENT,
            ButtonLabel.BUTTON_TUTOR,
            ButtonLabel.BUTTON_SOCIAL_MEDIA,
            ButtonLabel.BUTTON_INTERESTING_FACT,
            ButtonLabel.BUTTON_BACK
        )

    @staticmethod
    def get_button_label_students_menu():
        return (
            ButtonLabel.BUTTON_SCHEDULE,
            ButtonLabel.BUTTON_PROJECTS_EVENTS,
            ButtonLabel.BUTTON_USEFUL_SOURCES,
            ButtonLabel.BUTTON_PROFESSION_NAVIGATION,
            ButtonLabel.BUTTON_INTERESTING_FACT,
            ButtonLabel.BUTTON_BACK
        )


class Settings:
    scene_changed = True
    current_scene_index = '/start'
    last_scene_index = []

    @staticmethod
    def set_scene(index):
        Settings.scene_changed = True
        Settings.current_scene_index = index
        if index not in Settings.last_scene_index:
            Settings.last_scene_index.append(index)

    @staticmethod
    def set_back_scene():
        if len(Settings.last_scene_index) > 1:
            Settings.last_scene_index.pop()
            Settings.set_scene(Settings.last_scene_index[-1])


class BaseScene:
    def __init__(self):
        self.markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.button_labels: tuple[str] = ()
        self.texts_message: list[str] = []

    def activate(self, message: telebot.types.Message):
        self.generate_markup()
        self.send_message(message)

    def event(self, text):
        self.markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Settings.scene_changed = False
        if text in SCENES_TRIGGER.keys():
            Settings.set_scene(SCENES_TRIGGER[text].SCENE_INDEX)
        if text == ButtonLabel.BUTTON_BACK:
            Settings.set_back_scene()
        self.additional_event(text)

    def additional_event(self, text):
        # TODO document why this method is empty
        pass

    def generate_markup(self) -> object:
        self.markup.add(*self.button_labels)
        # for label in self.button_labels:
        #     self.markup.add(label)
        self.additional_button()

    def additional_button(self) -> object:
        # TODO documents
        pass

    def send_message(self, message: telebot.types.Message) -> object:
        for text in self.texts_message:
            bot.send_message(message.chat.id, text=text, reply_markup=self.markup)


class StartScene(BaseScene):
    SCENE_INDEX = '/start'

    def __init__(self):
        super().__init__()
        self.texts_message.append("–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è KIBERone/–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è")
        self.button_labels = ButtonLabel.get_button_label_main_menu()


class InformationScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_INFORMATION

    def __init__(self):
        super().__init__()
        self.button_labels = ButtonLabel.get_button_label_information_menu()
        self.texts_message = ["üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ KIBERone", 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª']


class StudentsScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_STUDENTS

    def __init__(self):
        super().__init__()
        self.button_labels = ButtonLabel.get_button_label_students_menu()
        self.texts_message = ["üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ KIBERone", 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª']


class PaymentScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_PAYMENT

    def __init__(self):
        super().__init__()


class TutorScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_TUTOR

    def __init__(self):
        super().__init__()


class SocialMediaScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_SOCIAL_MEDIA

    def __init__(self):
        super().__init__()


class InterestingFactScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_INTERESTING_FACT

    def __init__(self):
        super().__init__()


class ScheduleScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_SCHEDULE

    def __init__(self):
        super().__init__()


class ProjectsEventsScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_PROJECTS_EVENTS

    def __init__(self):
        super().__init__()


class UsefulSourcesScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_USEFUL_SOURCES

    def __init__(self):
        super().__init__()


class ProfessionNavigationScene(BaseScene):
    SCENE_INDEX = ButtonLabel.BUTTON_PROFESSION_NAVIGATION

    def __init__(self):
        super().__init__()


SCENES_TRIGGER = {
    '/start': StartScene(),
    ButtonLabel.BUTTON_INFORMATION: InformationScene(),
    ButtonLabel.BUTTON_STUDENTS: StudentsScene(),
    ButtonLabel.BUTTON_PAYMENT: PaymentScene(),
    ButtonLabel.BUTTON_TUTOR: TutorScene(),
    ButtonLabel.BUTTON_SOCIAL_MEDIA: SocialMediaScene(),
    ButtonLabel.BUTTON_SCHEDULE: ScheduleScene(),
    ButtonLabel.BUTTON_PROJECTS_EVENTS: ProjectsEventsScene(),
    ButtonLabel.BUTTON_USEFUL_SOURCES: UsefulSourcesScene(),
    ButtonLabel.BUTTON_PROFESSION_NAVIGATION: ProfessionNavigationScene(),
}


class Application:
    def __init__(self):
        # TODO document why this method is empty
        self.scene = None
        pass

    def find_cur_scene(self):
        for val in SCENES_TRIGGER.values():
            if val.SCENE_INDEX == Settings.current_scene_index:
                self.scene = val

    def run(self, message: telebot.types.Message):
        try:
            SCENES_TRIGGER[Settings.current_scene_index].event(message.text)
            if Settings.scene_changed:
                SCENES_TRIGGER[Settings.current_scene_index].activate(message)
        except TypeError:
            print(message)


# @bot.message_handler(commands=['start'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
#     btn2 = types.KeyboardButton('–£—á–µ–Ω–∏–∫–∏')
#     markup.add(btn1, btn2)
#     bot.send_message(message.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è KIBERone/–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è", reply_markup=markup)
#

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    app = Application()
    app.run(message)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # print(type(message))
    # if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üí≥ –û–ø–ª–∞—Ç–∞')
    #     btn2 = types.KeyboardButton('üë©üèª‚Äçüè´ –¢—å—é—Ç–æ—Ä—ã')
    #     btn3 = types.KeyboardButton('üé¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-–ú–µ–¥–∏–∞')
    #     btn4 = types.KeyboardButton('üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!')
    #     btn5 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
    #     markup.add(btn1, btn2, btn3, btn4, btn5)
    #     bot.send_message(message.from_user.id, "üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ KIBERone", reply_markup=markup)
    #     bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')
    #
    # elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    #     btn2 = types.KeyboardButton('–£—á–µ–Ω–∏–∫–∏')
    #     markup.add(btn1, btn2)
    #     bot.send_message(message.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã –±–æ—Ç –¥–ª—è KIBERone/–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è", reply_markup=markup)
    #
    # # –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    # elif message.text == 'üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!':
    #     for _ in range(1):
    #         bot.send_message(message.from_user.id, choice(itfacts))
    #
    # # –û–ü–õ–ê–¢–ê
    # elif message.text == 'üí≥ –û–ø–ª–∞—Ç–∞':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç–∞', reply_markup=markup, parse_mode='Markdown')
    #
    # # –¢–¨–Æ–¢–û–†–´
    # elif message.text == 'üë©üèª‚Äçüè´ –¢—å—é—Ç–æ—Ä—ã':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ —Ç—å—é—Ç–æ—Ä–æ–≤', reply_markup=markup, parse_mode='Markdown')
    #
    # # –°–û–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–î–ò–ê
    # elif message.text == 'üé¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-–ú–µ–¥–∏–∞':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn01 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     btn1 = types.KeyboardButton('üì∑ –í–∫')
    #     markup.add(btn01, btn1)
    #     bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    #
    # # –í–´–•–û–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    # elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üí≥ –û–ø–ª–∞—Ç–∞')
    #     btn2 = types.KeyboardButton('üë©üèª‚Äçüè´ –¢—å—é—Ç–æ—Ä—ã')
    #     btn3 = types.KeyboardButton('üé¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-–ú–µ–¥–∏–∞')
    #     btn4 = types.KeyboardButton('üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!')
    #     btn5 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
    #     markup.add(btn1, btn2, btn3, btn4, btn5)
    #     bot.send_message(message.from_user.id, "üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ KIBERone", reply_markup=markup)
    #     bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')
    #
    # # –£—á–µ–Ω–∏–∫–∏
    # elif message.text == '–£—á–µ–Ω–∏–∫–∏':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    #     btn2 = types.KeyboardButton('üìÅ –ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    #     btn3 = types.KeyboardButton('üìö –ó–Ω–∞–Ω–∏—è')
    #     btn4 = types.KeyboardButton('üíª –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π')
    #     btn5 = types.KeyboardButton('üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!')
    #     btn6 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
    #     markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    #     bot.send_message(message.from_user.id, "üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–µ KIBERone", reply_markup=markup)
    #     bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')
    #
    # elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    #     btn2 = types.KeyboardButton('–£—á–µ–Ω–∏–∫–∏')
    #     markup.add(btn1, btn2)
    #     bot.send_message(message.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã –±–æ—Ç –¥–ª—è KIBERone/–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è", reply_markup=markup)
    #
    # # –†–ê–°–ü–ò–°–ê–ù–ò–ï
    # elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # # –ü–†–û–ï–ö–¢–´ –ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø
    # elif message.text == 'üìÅ –ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn01 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     btn1 = types.KeyboardButton('üîé –û–ª–∏–º–ø–∏–∞–¥–∞ KIBERone - Scratch')
    #     btn2 = types.KeyboardButton('üîé –û–ª–∏–º–ø–∏–∞–¥–∞ KIBERone - Kodu Game Lab')
    #     btn3 = types.KeyboardButton('üîé –û–ª–∏–º–ø–∏–∞–¥–∞ KIBERone - Roblox Studio')
    #     btn4 = types.KeyboardButton('üîé –°–∫–æ—Ä–æ –±—É–¥—É—Ç')
    #     markup.add(btn01, btn1, btn2, btn3, btn4, btn4)
    #     bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    #
    # # –ó–ù–ê–ù–ò–Ø
    # elif message.text == 'üìö –ó–Ω–∞–Ω–∏—è':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn01 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     btn1 = types.KeyboardButton('üìö –ö–Ω–∏–≥–∏')
    #     btn2 = types.KeyboardButton('üìö –§–∏–ª—å–º—ã')
    #     markup.add(btn01, btn1, btn2)
    #     bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    #
    # elif message.text == 'üìö –ö–Ω–∏–≥–∏':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üìö –§–∏–ª—å–º—ã':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤', reply_markup=markup, parse_mode='Markdown')
    #
    # # –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–†–û–§–ï–°–°–ò–ô
    # elif message.text == 'üíª –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn01 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     btn1 = types.KeyboardButton("üõ† Frontend-developer")
    #     btn2 = types.KeyboardButton('üõ† Backend-developer')
    #     btn3 = types.KeyboardButton('üõ† Game-developer')
    #     btn4 = types.KeyboardButton('üõ† –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫')
    #     btn5 = types.KeyboardButton('üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞')
    #     btn6 = types.KeyboardButton('üõ† 3d —Ö—É–¥–æ–∂–Ω–∏–∫')
    #     markup.add(btn01, btn1, btn2, btn3, btn4, btn5, btn6)
    #     bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    #
    # elif message.text == 'üõ† Frontend-developer':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üõ† Backend-developer':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üõ† Game-developer':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üõ† –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # elif message.text == 'üõ† 3d —Ö—É–¥–æ–∂–Ω–∏–∫':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup, parse_mode='Markdown')
    #
    # # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –£–ß–ï–ù–ò–ö–ê
    # elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    #     btn2 = types.KeyboardButton('üìÅ –ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    #     btn3 = types.KeyboardButton('üìö –ó–Ω–∞–Ω–∏—è')
    #     btn4 = types.KeyboardButton('üíª –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π')
    #     btn5 = types.KeyboardButton('üëÄ –¢—ã —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–ª!')
    #     btn6 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
    #     markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    #     bot.send_message(message.from_user.id, "üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–µ KIBERone", reply_markup=markup)
    #     bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')


bot.polling(none_stop=True, interval=0)
